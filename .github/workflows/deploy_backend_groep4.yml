name: Backend CI

on:
  push:
    branches:
      - Dev-Group-4

concurrency: 
  group: Dev-Group-4
  cancel-in-progress: false

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt install libmariadb3 libmariadb-dev -y
          pip install -r requirements.txt

      - name: Build API Artifacts
        run: | 
          mkdir Backend
          cp -r App main.py requirements.txt ansible Backend/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Backend
          path: Backend

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
         name: Backend
         path: Backend

      - name: Install Ansible on VM
        uses: appleboy/ssh-action@v1.0.3
        with:
           host: ${{ secrets.AZURE_VM_HOST_GROEP4 }} 
           username: ${{ secrets.AZURE_VM_USERNAME_GROEP4 }}  
           password: ${{ secrets.AZURE_VM_PASSWORD_GROEP4 }}
           script: |
             sudo apt update
             sudo apt install -y ansible

      - name: Reboot server
        uses: dawidd6/action-ansible-playbook@v2.1.2
        with:
          playbook: Backend/ansible/reboot_services.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
          ANSIBLE_INVENTORY: 'ansible/inventory'
          ANSIBLE_REMOTE_USER: ${{ secrets.AZURE_VM_USERNAME_GROEP4 }}
          ANSIBLE_REMOTE_PASS: ${{ secrets.AZURE_VM_PASSWORD_GROEP4 }}

      - name: Clean Old Artefact
        uses: appleboy/ssh-action@v1.0.3
        with:
            host: ${{ secrets.AZURE_VM_HOST_GROEP4 }} 
            username: ${{ secrets.AZURE_VM_USERNAME_GROEP4 }}  
            password: ${{ secrets.AZURE_VM_PASSWORD_GROEP4 }}
            script: |
              sudo rm -rf Backend

      - name: Deploy to Server
        uses: garygrossgarten/github-action-scp@release
        with:
           local: Backend
           remote: Backend
           host: ${{ secrets.AZURE_VM_HOST_GROEP4 }} 
           username: ${{ secrets.AZURE_VM_USERNAME_GROEP4 }}  
           password: ${{ secrets.AZURE_VM_PASSWORD_GROEP4 }}
           
      - name: Run Ansible Playbook - Install Dependencies
        uses: dawidd6/action-ansible-playbook@v2.1.2
        with:
          playbook: Backend/ansible/install_dependencies.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
          ANSIBLE_INVENTORY: 'ansible/inventory'
          ANSIBLE_REMOTE_USER: ${{ secrets.AZURE_VM_USERNAME_GROEP4 }}
          ANSIBLE_REMOTE_PASS: ${{ secrets.AZURE_VM_PASSWORD_GROEP4 }}
          
      - name: Run Ansible Playbook - Start Services
        uses: dawidd6/action-ansible-playbook@v2.1.2
        with:
          playbook: Backend/ansible/start_services.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
          ANSIBLE_INVENTORY: 'ansible/inventory'
          ANSIBLE_REMOTE_USER: ${{ secrets.AZURE_VM_USERNAME_GROEP4 }}
          ANSIBLE_REMOTE_PASS: ${{ secrets.AZURE_VM_PASSWORD_GROEP4 }}

      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Backend build succeeded :tada:"}' ${{ secrets.GROEP_4_SLACK_WEBHOOK }}

      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Backend build failed :x:"}' ${{ secrets.GROEP_4_SLACK_WEBHOOK }}
